"0","# updated function with interaction plots"
"0",""
"0","run_anova <- function(data, formula, response_var = NULL, label = NULL, save_dir = ""Figures/aov-compare_distance"") {"
"0","  library(broom)"
"0","  library(dplyr)"
"0","  library(ggplot2)"
"0","  "
"0","  # Create save directory if it doesn't exist"
"0","  if (!dir.exists(save_dir)) dir.create(save_dir, recursive = TRUE)"
"0","  "
"0","  # Convert formula string to formula if needed"
"0","  if (is.character(formula)) formula <- as.formula(formula)"
"0","  "
"0","  # Fit the model"
"0","  fit <- aov(formula, data = data)"
"0","  "
"0","  # Get tidy ANOVA summary"
"0","  tidy_res <- broom::tidy(fit)"
"0","  "
"0","  # Add response_var and label columns if provided"
"0","  if (!is.null(response_var)) tidy_res <- mutate(tidy_res, Response = response_var)"
"0","  if (!is.null(label)) tidy_res <- mutate(tidy_res, Dataset = label)"
"0","  "
"0","  # Reorder columns so Dataset first, Response second, then the rest"
"0","  col_order <- c(""Dataset"", ""Response"", setdiff(colnames(tidy_res), c(""Dataset"", ""Response"")))"
"0","  tidy_res <- tidy_res[, col_order]"
"0","  "
"0","  # Extract terms for interaction plots (exclude residuals, intercept)"
"0","  terms_df <- tidy_res %>% filter(term != ""Residuals"" & term != ""Intercept"")"
"0","  "
"0","  # Identify interaction terms (terms with "":"" in them)"
"0","  interaction_terms <- terms_df$term[grepl("":"", terms_df$term)]"
"0","  "
"0","  # Loop through each interaction term and create plots"
"0","  for (int_term in interaction_terms) {"
"0","    # Split interaction term into factors"
"0","    factors <- strsplit(int_term, "":"")[[1]]"
"0","    "
"0","    # Check if factors exist in data and are factors; if not, convert them"
"0","    for (f in factors) {"
"0","      if (!f %in% colnames(data)) {"
"0","        warning(paste(""Factor"", f, ""not found in data, skipping plot for"", int_term))"
"0","        next"
"0","      }"
"0","      if (!is.factor(data[[f]])) {"
"0","        data[[f]] <- as.factor(data[[f]])"
"0","      }"
"0","    }"
"0","    "
"0","    # Generate means for combinations of factors"
"0","    means_df <- data %>%"
"0","      group_by(across(all_of(factors))) %>%"
"0","      summarise(mean_response = mean(.data[[all.vars(formula)[1]]], na.rm = TRUE), .groups = ""drop"")"
"0","    "
"0","    # Create interaction plot"
"0","    p <- ggplot(means_df, aes_string(x = factors[1], y = ""mean_response"", color = factors[2], group = factors[2])) +"
"0","      geom_point(size = 3) +"
"0","      geom_line() +"
"0","      labs("
"0","        title = paste(""Interaction plot for"", int_term),"
"0","        x = factors[1],"
"0","        y = response_var %||% all.vars(formula)[1],"
"0","        color = factors[2]"
"0","      ) +"
"0","      theme_minimal()"
"0","    "
"0","    # Save plot"
"0","    file_name <- paste0(""interaction_"", int_term, "".png"")"
"0","    file_path <- file.path(save_dir, file_name)"
"0","    ggsave(file_path, p, width = 6, height = 4)"
"0","  }"
"0","  "
"0","  return(tidy_res)"
"0","}"
"0",""
