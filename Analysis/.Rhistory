main = "Right Clips",
col = "violetred4", pch = 16, stack = TRUE, shrink = 1)
points(circular(df_right$signed_diff, units = "degrees"),
col = "thistle2", pch = 16)
legend("topleft", legend = c("Patterned", "Plain"), col = c("violetred4", "thistle2"), pch = 16, bty = "n")
# Close SVG device
dev.off()
# Create output directories
dir.create("Figures/Motion_plots", recursive = TRUE, showWarnings = FALSE)
dir.create("Figures/Motion_plots/Combined", recursive = TRUE, showWarnings = FALSE)
# Get all unique ClipNames from FullClipName
unique_clips <- unique(EMDOverlay_clipsummary$ClipName)
# Loop through each unique ClipName
for (clip in unique_clips) {
message("▶️ Processing: ", clip)
# Generate and save all plots
plots <- plot_motion(
clipname     = clip,
frame_data   = EMDOverlay_frames,
summary_data = EMDOverlay_clipsummary,
output_dir   = "Figures/Motion_plots",
save_circular  = TRUE,
save_direction = TRUE,
save_magnitude = TRUE
)
# Combine the three saved plots
combine_motion_plots_by_clipname(
clipname    = clip,
input_dir   = "Figures/Motion_plots",
output_dir  = "Figures/Motion_plots/Combined"
)
}
# Create output directories
dir.create("Figures/MotionPatterns/Plots/ClipPlots", recursive = TRUE, showWarnings = FALSE)
dir.create("Figures/MotionPatterns/Plots/ClipPlots/Combined", recursive = TRUE, showWarnings = FALSE)
# Get all unique ClipNames from FullClipName
unique_clips <- unique(EMDOverlay_clipsummary$ClipName)
# Loop through each unique ClipName
for (clip in unique_clips) {
message("▶️ Processing: ", clip)
# Generate and save all plots
plots <- plot_motion(
clipname     = clip,
frame_data   = EMDOverlay_frames,
summary_data = EMDOverlay_clipsummary,
output_dir   = "Figures/Motion_plots",
save_circular  = TRUE,
save_direction = TRUE,
save_magnitude = TRUE
)
# Combine the three saved plots
combine_motion_plots_by_clipname(
clipname    = clip,
input_dir   = "Figures/MotionPatterns/Plots/ClipPlots",
output_dir  = "Figures/MotionPatterns/Plots/ClipPlots/Combined"
)
}
source("Functions/packages.r")
source("Functions/extract_metadata.r")
source("Functions/clean_dfs.r")
source("Functions/calculations.r")
source("Functions/modelling.r")
packages <- c("corrr", "ggcorrplot", "FactoMineR", "tidyverse", "factoextra", "ggbiplot", "svglite", "gt", "car", "broom.mixed", "purrr", "janitor", "stringr", "emmeans", "dplyr")
check_and_load_packages(packages)
theme_set(theme_minimal()) #standardise the plots
species_colours <- c("Botia_lohachata" = "#E69F00", "Yasuhikotakia_modesta" = "#0072B2")
species_labels <- c(
"Botia_lohachata" = "Botia lohachata",
"Yasuhikotakia_modesta" = "Yasuhikotakia modesta"
)
data <- read_csv("CleanData/Merged_100.csv")
# Remove columns containing Hrz/hrz/Vrt/vrt
filt_data <- data %>%
select(-matches("(?i)(Hrz|Vrt)"))  # (?i) makes it case-insensitive
data <- read_csv("CleanData/Merged_100.csv")
# Remove columns containing Hrz/hrz/Vrt/vrt
filt_data <- data %>%
select(-matches("(?i)(Hrz|Vrt)"))  # (?i) makes it case-insensitive
# Remove columns containing Hrz/hrz/Vrt/vrt
# Get matching columns and remove them if they exist (Hrz/hrt/vrt/Vrt)
cols_to_remove <- grep("(?i)(Hrz|Vrt)", names(data), value = TRUE)
filt_data <- data %>%
select(-any_of(cols_to_remove))
numerical_data <- filt_data[,-1:-3]
# Remove columns containing Hrz/hrz/Vrt/vrt
# Get matching columns and remove them if they exist (Hrz/hrt/vrt/Vrt)
library(dplyr)
cols_to_remove <- grep("(?i)(Hrz|Vrt)", names(data), value = TRUE)
filt_data <- data %>%
select(-any_of(cols_to_remove))
# Remove columns containing Hrz/hrz/Vrt/vrt
# Get matching columns and remove them if they exist (Hrz/hrt/vrt/Vrt)
cols_to_remove <- grep("(?i)(Hrz|Vrt)", names(data), value = TRUE)
filt_data <- data %>%
dplyr::select(-any_of(cols_to_remove))
numerical_data <- filt_data[,-1:-3]
normalised_data <- scale(numerical_data)
variables <- names(data[,-1:-3])
res.pca <- prcomp(normalised_data, scale = FALSE)
corr_matrix <- cor(normalised_data)
p.mat <- cor_pmat(normalised_data)
corr_plot <- ggcorrplot(corr_matrix,
hc.order = TRUE,
type = "lower",
p.mat = p.mat,
insig = "pch",
pch = 4,
pch.cex = 1,
pch.col = "grey50",
ggtheme = ggplot2::theme_gray(),
colors = c("#6D9EC1", "white", "#E46726")) +
ggtitle("Correlation Plot of Variables Used in PCA") +
theme(
plot.title = element_text(hjust = 0.5, size = 10, face = "bold"),
axis.text.x = element_text(size = 3),
axis.text.y = element_text(size = 3)
) +
guides(fill = guide_colorbar(title = "Correlation")) +
annotate("text", x = 3, y = 40, label = "X", size = 3, color = "grey50") +
annotate("text", x = 6.5, y = 40, label = "Insignificant", hjust = 0)
ggsave("Figures/ColourPatterns/PCA/CorrPlot-Photos_100.svg", plot = corr_plot, width = 8, height = 5)
ggsave("Figures/ColourPatterns/PCA/CorrPlot-Photos_100.png", plot = corr_plot, width = 8, height = 5)
corr_plot
scree_plot <- fviz_eig(res.pca,
xlab = "Principal Components",
ylab = "Variance Explained (%)") +
ggtitle("Scree plot for PCA") +
theme_minimal()
ggsave("Figures/ScreePlot-Photos_100.svg", plot = scree_plot, width = 8, height = 5)
scree_plot
# Eigenvalues
eig.val <- get_eigenvalue(res.pca)
eig.val
# Results for Variables
res.var <- get_pca_var(res.pca)
res.var$coord          # Coordinates
res.var$contrib        # Contributions to the PCs
res.var$cos2           # Quality of representation
# Results for individuals
res.ind <- get_pca_ind(res.pca)
res.ind$coord          # Coordinates
res.ind$contrib        # Contributions to the PCs
res.ind$cos2           # Quality of representation
# ################## VARIABLES ######################## #
# Helper function
#::::::::::::::::::::::::::::::::::::::::
var_coord_func <- function(loadings, comp.sdev){
loadings*comp.sdev
}
# Compute Coordinates for Variables
#::::::::::::::::::::::::::::::::::::::::
loadings <- res.pca$rotation
sdev <- res.pca$sdev
var.coord <- t(apply(loadings, 1, var_coord_func, sdev))
# Compute Cos2 for Variables
#::::::::::::::::::::::::::::::::::::::::
var.cos2 <- var.coord^2
# Compute contributions for Variables
#::::::::::::::::::::::::::::::::::::::::
comp.cos2 <- apply(var.cos2, 2, sum)
contrib <- function(var.cos2, comp.cos2){var.cos2*100/comp.cos2}
var.contrib <- t(apply(var.cos2,1, contrib, comp.cos2))
# ################## INDIVIDUALS ######################## #
# Coordinates of individuals
#::::::::::::::::::::::::::::::::::
ind.coord <- res.pca$x
# Cos2 of individuals
#:::::::::::::::::::::::::::::::::
# 1. square of the distance between an individual and the
# PCA center of gravity
center <- res.pca$center
scale<- res.pca$scale
getdistance <- function(ind_row, center, scale){
return(sum(((ind_row-center)/scale)^2))
}
d2 <- apply(normalised_data,1,getdistance, center, scale) # check this
# 2. Compute the cos2. The sum of each row is 1
cos2 <- function(ind.coord, d2){return(ind.coord^2/d2)}
ind.cos2 <- apply(ind.coord, 2, cos2, d2)
# Contributions of individuals
#:::::::::::::::::::::::::::::::
contrib <- function(ind.coord, comp.sdev, n.ind){
100*(1/n.ind)*ind.coord^2/comp.sdev^2
}
ind.contrib <- t(apply(ind.coord, 1, contrib,
res.pca$sdev, nrow(ind.coord)))
library(tidyverse)
library(gt)
library(gtExtras)
# Keep only first 5 PCs
var.contrib.df <- as.data.frame(var.contrib)[, 1:5]
# Add variable names as a column
var.contrib.df <- var.contrib.df %>%
rownames_to_column(var = "Variable")
# Convert to long format for plotting
var.contrib_long <- var.contrib.df %>%
pivot_longer(
cols = starts_with("PC"),
names_to = "PC",
values_to = "Contribution"
)
# Convert to wide format with PCs as rows and Variables as columns
var.contrib_wide <- var.contrib_long %>%
pivot_wider(
names_from = Variable,
values_from = Contribution
)
var.contrib_wide <- var.contrib_wide %>%
rename(`Principal Component` = PC) %>%
gt()
# Make a pretty gt table (wide format, first 5 PCs)
gt_var_contrib <- var.contrib.df %>%
gt() %>%
tab_header(
title = "Variable Contributions to First 5 Principal Components"
) %>%
fmt_number(
columns = starts_with("PC"),
decimals = 2
) %>%
cols_label(
Variable = "Variable",
PC1 = "PC1 (%)",
PC2 = "PC2 (%)",
PC3 = "PC3 (%)",
PC4 = "PC4 (%)",
PC5 = "PC5 (%)"
)
# Save as PNG
gtsave(gt_var_contrib, "Figures/Plots/PCA/var_contributions.png")
gtsave(var.contrib_wide, "Figures/Plots/PCA/Widevar_contributions.png", vwidth = 6000)
# plotting the contributions
varcontrib_plot <- ggplot(var.contrib_long, aes(x = Variable, y = Contribution, colour = PC)) +
geom_point(position = "dodge") +
labs(
title = "Variable Contributions to First 5 Principal Components",
y = "Contribution (%)",
x = "Variable"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position="bottom")
ggsave("Figures/ColourPatterns/PCA/VarContribPlot.png", plot = varcontrib_plot, width = 8, height = 5)
varcontrib_plot
# Get the loadings matrix (i.e., variable contributions to PCs)
loadings <- res.pca$rotation
# Convert to a data frame for plotting
loadings_df <- as.data.frame(loadings)
loadings_df$Variable <- rownames(loadings_df)
# (Optional) Reshape to long format for heatmap
loadings_long <- pivot_longer(loadings_df,
cols = starts_with("PC"),
names_to = "PC",
values_to = "Correlation")
# heatmap of loadings
loadingsPC_heatmap <- ggplot(loadings_long, aes(x = PC, y = Variable, fill = Correlation)) +
geom_tile() +
scale_fill_gradient2(low = "#6D9EC1", high = "#E46726", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab") +
theme_minimal() +
labs(title = "Variable Correlations (Loadings) with Principal Components",
x = "Principal Component",
y = "Original Variable") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave("Figures/ColourPatterns/PCA/Loadings-PC_Heatmap.png", plot = loadingsPC_heatmap, width = 8, height = 5)
# Get the loadings matrix (i.e., variable contributions to PCs)
loadings <- res.pca$rotation
# Convert to a data frame for plotting
loadings_df <- as.data.frame(loadings)
loadings_df$Variable <- rownames(loadings_df)
# (Optional) Reshape to long format for heatmap
loadings_long <- pivot_longer(loadings_df,
cols = starts_with("PC"),
names_to = "PC",
values_to = "Correlation")
# heatmap of loadings
loadingsPC_heatmap <- ggplot(loadings_long, aes(x = PC, y = Variable, fill = Correlation)) +
geom_tile() +
scale_fill_gradient2(low = "#6D9EC1", high = "#E46726", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab") +
theme_minimal() +
labs(title = "Variable Correlations (Loadings) with Principal Components",
x = "Principal Component",
y = "Original Variable") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave("Figures/ColourPatterns/PCA/Loadings-PC_Heatmap.png", plot = loadingsPC_heatmap, width = 8, height = 5)
# Get PC scores
scores <- res.pca$x
# Compute correlation of original variables with PCs
cor_mat <- cor(normalised_data, scores)
# Convert to long format for heatmap
cor_df <- as.data.frame(cor_mat)
cor_df$Variable <- rownames(cor_df)
cor_long <- pivot_longer(cor_df, cols = starts_with("PC"),
names_to = "PC", values_to = "Correlation")
corPC_heatmap <- ggplot(cor_long, aes(x = PC, y = Variable, fill = Correlation)) +
geom_tile() +
scale_fill_gradient2(low = "#6D9EC1", high = "#E46726", mid = "white") +
theme_minimal() +
labs(title = "Variable Correlations with Principal Components",
x = "Principal Component",
y = "Original Variable") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave("Figures/ColourPatterns/PCA/Corrs-PC_Heatmap.png", plot = corPC_heatmap, width = 8, height = 5)
# For PC1
library(entropy)
contrib_pc1 <- res.var$contrib[, 1] / 100  # proportions
shannon_pc1 <- entropy::entropy(contrib_pc1, unit = "log2")
# For PC2
contrib_pc2 <- res.var$contrib[, 2] / 100
shannon_pc2 <- entropy::entropy(contrib_pc2, unit = "log2")
# Extract scores
pca_scores <- as.data.frame(res.pca$x)
pca_scores$Species <- data$Species
# Group centroids
coord.groups <- get_pca_ind(res.pca)$coord %>%
as.data.frame() %>%
select(Dim.1, Dim.2) %>%
mutate(Species = data$Species) %>%
group_by(Species) %>%
summarise(PC1 = mean(Dim.1), PC2 = mean(Dim.2)) %>%
mutate(
Species_label = species_labels[Species],
label = paste0("PC1 = ", round(PC1, 1), ", PC2 = ", round(PC2, 1))
)
# Group centroids
coord.groups <- get_pca_ind(res.pca)$coord %>%
as.data.frame() %>%
dplyr::select(Dim.1, Dim.2) %>%
mutate(Species = data$Species) %>%
group_by(Species) %>%
summarise(PC1 = mean(Dim.1), PC2 = mean(Dim.2)) %>%
mutate(
Species_label = species_labels[Species],
label = paste0("PC1 = ", round(PC1, 1), ", PC2 = ", round(PC2, 1))
)
# Combine labels into one string
centroid_text <- paste(coord.groups$label, collapse = "\n")
# Top 5 contributors and corresponding loadings for PC1 and PC2
PC1_contrib <- sort(var.contrib[, 1], decreasing = TRUE)[1:5]
PC2_contrib <- sort(var.contrib[, 2], decreasing = TRUE)[1:5]
PC1_vars <- names(PC1_contrib)
PC2_vars <- names(PC2_contrib)
PC1_loadings <- res.pca$rotation[PC1_vars, 1]
PC2_loadings <- res.pca$rotation[PC2_vars, 2]
# Format: var (contrib, loading)
format_vars <- function(vars, contribs, loadings) {
paste0(vars, " (", round(contribs, 2), ", ", round(loadings, 2), ")", collapse = ", ")
}
PC1_str <- format_vars(PC1_vars, PC1_contrib, PC1_loadings)
PC2_str <- format_vars(PC2_vars, PC2_contrib, PC2_loadings)
# Variance explained
percentVar <- round(100 * summary(res.pca)$importance[2, 1:2], 1)
# Combine into dataframe
PCsummary_df <- data.frame(
PC = c("PC1", "PC2"),
`Top Variables (contribution, loading)` = c(PC1_str, PC2_str),
`Variance explained (%)` = percentVar,
check.names = FALSE
)
# Output as GT table
library(gt)
PC_table <- PCsummary_df %>%
gt() %>%
tab_header(title = "Principal Component Summary: Top 5 Variables") %>%
fmt_number(columns = "Variance explained (%)", decimals = 1) %>%
cols_align("left", columns = vars(`Top Variables (contribution, loading)`)) %>%
opt_row_striping()
print(PC_table)
gtsave(PC_table, filename = "Figures/ColourPatterns/PCA/PC_table.png")
library(vegan)
# Take individual PCA scores
pca_scores <- as.data.frame(res.pca$x[, 1:2])
pca_scores$Species <- data$Species  # add species info
# Calculate dispersion (distance to centroid) for each group
dist_pca <- dist(pca_scores[, 1:2])
dispersion <- betadisper(dist_pca, pca_scores$Species)
leveneTest(dispersion$distances ~ dispersion$group)
plot(dispersion)
# Save results
png("Figures/ColourPatterns/PCA/dispersion_plot.png", width = 800, height = 600)
plot(dispersion)
dev.off()
aov_result <- anova(dispersion)
# Labelled biplot
biplot_plot <- ggplot(pca_scores, aes(x = PC1, y = PC2, color = Species)) +
geom_point(size = 3, shape = 16) +
stat_ellipse(aes(group = Species), type = "t", alpha = 0.1, linewidth = 1) +
scale_color_manual(values = species_colours,
labels = c(
expression(italic("Botia lohachata")),
expression(italic("Yasuhikotakia modesta"))
)) +
labs(
x = paste0("PC1 (", percentVar[1], "%) [main variable = ", PC1_top, "]"),
y = paste0("PC2 (", percentVar[2], "%) [main variable = ", PC2_top, "]"),
color = "Species"
) +
theme(
legend.direction = 'horizontal',
legend.position = 'top',
plot.margin = margin(20, 20, 60, 20),
axis.title = element_text(size = 10)  # Adjust this number as needed
) +
annotate(
"text", x = Inf, y = -Inf, label = centroid_text, hjust = 1.05, vjust = -0.5, size = 3.5, fontface = "italic"
)
PC1_contrib
names(PC1_contrib)[1]
PC1_vars
PC1_top <- PC1_vars[1]
PC2_top <- PC2_vars[1]
PC1_top
# Labelled biplot
biplot_plot <- ggplot(pca_scores, aes(x = PC1, y = PC2, color = Species)) +
geom_point(size = 3, shape = 16) +
stat_ellipse(aes(group = Species), type = "t", alpha = 0.1, linewidth = 1) +
scale_color_manual(values = species_colours,
labels = c(
expression(italic("Botia lohachata")),
expression(italic("Yasuhikotakia modesta"))
)) +
labs(
x = paste0("PC1 (", percentVar[1], "%) [main variable = ", PC1_top, "]"),
y = paste0("PC2 (", percentVar[2], "%) [main variable = ", PC2_top, "]"),
color = "Species"
) +
theme(
legend.direction = 'horizontal',
legend.position = 'top',
plot.margin = margin(20, 20, 60, 20),
axis.title = element_text(size = 10)  # Adjust this number as needed
) +
annotate(
"text", x = Inf, y = -Inf, label = centroid_text, hjust = 1.05, vjust = -0.5, size = 3.5, fontface = "italic"
)
ggsave("Figures/ColourPatterns/PCA/BiPlot-Photos_100.svg", plot = biplot_plot, width = 8, height = 5)
ggsave("Figures/ColourPatterns/PCA/BiPlot-Photos_100.png", plot = biplot_plot, width = 8, height = 5)
biplot_plot
coord.groups
# Combine labels into one string
centroid_text <- paste(coord.groups$Species_label, collapse = "\n")
# Labelled biplot
biplot_plot <- ggplot(pca_scores, aes(x = PC1, y = PC2, color = Species)) +
geom_point(size = 3, shape = 16) +
stat_ellipse(aes(group = Species), type = "t", alpha = 0.1, linewidth = 1) +
scale_color_manual(values = species_colours,
labels = c(
expression(italic("Botia lohachata")),
expression(italic("Yasuhikotakia modesta"))
)) +
labs(
x = paste0("PC1 (", percentVar[1], "%) [main variable = ", PC1_top, "]"),
y = paste0("PC2 (", percentVar[2], "%) [main variable = ", PC2_top, "]"),
color = "Species"
) +
theme(
legend.direction = 'horizontal',
legend.position = 'top',
plot.margin = margin(20, 20, 60, 20),
axis.title = element_text(size = 10)  # Adjust this number as needed
) +
annotate(
"text", x = Inf, y = -Inf, label = centroid_text, hjust = 1.05, vjust = -0.5, size = 3.5, fontface = "italic"
)
ggsave("Figures/ColourPatterns/PCA/BiPlot-Photos_100.svg", plot = biplot_plot, width = 8, height = 5)
ggsave("Figures/ColourPatterns/PCA/BiPlot-Photos_100.png", plot = biplot_plot, width = 8, height = 5)
biplot_plot
coord.groups
# Combine labels into one string
centroid_text <- paste(coord.groups$Species_label, coord.groups$label, collapse = "\n")
centroid_text
# Labelled biplot
biplot_plot <- ggplot(pca_scores, aes(x = PC1, y = PC2, color = Species)) +
geom_point(size = 3, shape = 16) +
stat_ellipse(aes(group = Species), type = "t", alpha = 0.1, linewidth = 1) +
scale_color_manual(values = species_colours,
labels = c(
expression(italic("Botia lohachata")),
expression(italic("Yasuhikotakia modesta"))
)) +
labs(
x = paste0("PC1 (", percentVar[1], "%) [main variable = ", PC1_top, "]"),
y = paste0("PC2 (", percentVar[2], "%) [main variable = ", PC2_top, "]"),
color = "Species"
) +
theme(
legend.direction = 'horizontal',
legend.position = 'top',
plot.margin = margin(20, 20, 60, 20),
axis.title = element_text(size = 10)  # Adjust this number as needed
) +
annotate(
"text", x = Inf, y = -Inf, label = centroid_text, hjust = 1.05, vjust = -0.5, size = 3.5, fontface = "italic"
)
ggsave("Figures/ColourPatterns/PCA/BiPlot-Photos_100.svg", plot = biplot_plot, width = 8, height = 5)
ggsave("Figures/ColourPatterns/PCA/BiPlot-Photos_100.png", plot = biplot_plot, width = 8, height = 5)
biplot_plot
heightdata <- read.csv("RawData/FishHeight.csv", header = TRUE, sep = "\t", na.strings = c("", "NA"))
head(heightdata)
heightdata <- read_csv("RawData/FishHeight.csv", header = TRUE, sep = "\t", na.strings = c("", "NA"))
heightdata <- read_csv("RawData/FishHeight.csv")
head(heightdata)
t_result <- t.test(Height ~ Species, data = data)
head(heightdata)
heightdata <- read.csv("RawData/FishHeight.csv")
head(heightdata)
t_result <- t.test(Height ~ Species, data = data)
heightdata <- read_csv("RawData/FishHeight.csv")
head(heightdata)
t_result <- t.test(Height ~ Species, data = heightdata)
print(t_result)
